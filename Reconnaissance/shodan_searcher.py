# Python script to extract information using Shodan's API based on queries with filters
# Full list of filters under "GET /shodan/host/search": https://developer.shodan.io/api
# ** Script is designed to work with a paid API key and will use API query credits ** 
#
# Requires Shodan Python module: Performs Shodan API Query
# https://pypi.python.org/pypi/shodan
#
# Requires cymruwhois Python module: Peforms IP -> CIDR lookup based on Shodan results
# https://pypi.python.org/pypi/cymruwhois
#
# Requires tld Python module: Parses out TLD from shodan results
# https://pypi.python.org/pypi/tld/0.7.3
#
# Example output:
# python shodan_search.py -s ip:173.194.206.106 -w google_results
# [+] Query: ip:173.194.206.106 Total_Results: 1
# [-] 173.194.206.106 (qj-in-f106.1e100.net) 80  
# [+] Found Results in CIDRs: 173.194.206.0/24
# [+] Found the following TLDs: 1e100.net

# Optional switches: 
#	"--url" = parses/prints URL based on web services enumerated
#	"--title" = parses/prints HTML title if present

#!/usr/bin/env python

import shodan
import sys
import optparse
import math
from cymruwhois import Client
from tld import get_tld

# Shodan API Query function example output (Query made + results):
# [+] Query: net:192.168.0.0/16 Total_Results: 2
# [-] 192.168.246.248 (sample.hostname.com) Port: 443 Microsoft IIS 
# [-] 192.168.246.249 (sample.hostname1.com) Port: 80 Apache
def shodanQuery(search_str, api, results_file, show_title, print_urls):
    try:
	# Make API Query to get total number of results
        results = api.search(search_str.strip())
        total_matches = results['total']

        # Print/write out totals
        print "[+] Query: {0} Total_Results: {1}".format(search_str.strip(), str(total_matches))
        if results_file: 
            results_file.write("[+] Query: "+search_str.strip()+" Total_Results: "+str(total_matches)+"\n")

        # Make API queries to grab all results based on number of pages "page_num" -> 100 results per page hence total_matches/100.0
        for page_num in range(1, int(math.ceil(total_matches/100.0))+1):
            results = api.search(search_str.strip(), page=page_num)
            for item in results['matches']:
                ips.append(item['ip_str'])
		# Parse out fields of interest that are not always present in data (hostnames, product, title)
                if item.has_key('hostnames'):
                    hostnames = ', '.join(item['hostnames'])
                    for host_name in item['hostnames']: tlds.append(host_name)
                else:
                    hostnames=''
                if item.has_key('product'):
                    product = "Server: "+item['product']
                else:
                    product = ''
                if show_title == True:
                    if item.has_key('title'):
                        # Titles can be very ugly and this gets things on one line for us
                        title = str(item['title'].replace('\n', '').lstrip().strip())
                else:
                    title = ''

                # Print/write out results
                try: 
                    print "[-] {0} ({1}) {2} {3} {4}".format(item['ip_str'], hostnames, str(item['port']), product, title)
                    if results_file:
                        results_file.write("[-] "+item['ip_str']+" ("+hostnames+")"+" Port: "+str(item['port'])+" "+product+" "+title+"\n")
                except:
                    print "[-] {0} ({1}) {2} {3}".format(item['ip_str'], hostnames, str(item['port']), product)
                    if results_file:
                        results_file.write("[-] "+item['ip_str']+" ("+hostnames+")"+" Port: "+str(item['port'])+" "+product+"\n")

                if print_urls:
                    try:
                        port = str(item['port'])

                        if port == '80':
                            print "URL: http://"+item['ip_str']+"/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: http://"+host_name+"/"
                                if results_file:
                                    results_file.write("URL: http://"+host_name+"/")


                        if port == '443':
                            print "URL: https://"+item['ip_str']+"/"
                            if results_file:
                                results_file.write("URL: https://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: https://"+host_name+"/"
                                if results_file:
                                    results_file.write("URL: https://"+host_name+"/")


                        if port == '8080':
                            print "URL: http://"+item['ip_str']+":8080/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: http://"+host_name+":8080/"
                                if results_file:
                                    results_file.write("URL: http://"+host_name+":8080/")


                        if port == '8443':
                            print "URL: https://"+item['ip_str']+":8443/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: https://"+host_name+":8443/"
                                if results_file:
                                    results_file.write("URL: https://"+host_name+":8443/")


                        if port == '8000':
                            print "URL: http://"+item['ip_str']+":8000/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: http://"+host_name+":8000/"
                                if results_file:
                                    results_file.write("URL: http://"+host_name+":8000/")


                        if port == '8081':
                            print "URL: http://"+item['ip_str']+":8081/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: http://"+host_name+":8081/"
                                if results_file:
                                    results_file.write("URL: http://"+host_name+":8081/")


                        if port == '8834':
                            print "URL: https://"+item['ip_str']+":8834/"
                            if results_file:
                                results_file.write("URL: http://"+item['ip_str']+"/")

                            for host_name in item['hostnames']:
                                print "URL: https://"+host_name+":8834/"
                                if results_file:
                                    results_file.write("URL: https://"+host_name+":8834/")

                    except Exception as e:
                        print e


    except shodan.APIError, e:
        print e

def net_lookup(ips, results_file):
    try:
        c=Client()
        ips = list(set(ips)) # uniq IPs
        r = c.lookupmany_dict(ips)
        cidrs = []

        for ip in ips:
            cidrs.append(r[ip].prefix)
        cidrs = list(set(cidrs)) # uniq CIDRs
        cidr_results = ', '.join(cidrs)
        print "[+] Found Results in CIDRs: "+cidr_results
        if results_file:
            results_file.write("[+] Found Results in CIDRs: "+cidr_results+"\n")   
    except Exception as e:
        print e

# Parse out the TLD from the shodan response
def tld_output(tlds, results_file):
    try:
        tlds_output=[]
        for tld in tlds:
            tlds_output.append(get_tld("http://"+tld)) # Parse TLD
        tlds_output=list(set(tlds_output)) # uniq TLDs
        print "[+] Found the following TLDs: "+', '.join(tlds_output)
        if results_file:
            results_file.write("[+] Found the following TLDs: "+', '.join(tlds_output)+"\n")
    except Exception as e:
        print e


def main():
    parser=optparse.OptionParser(sys.argv[0]+' -w <output_file> (optional) -s <query_str> OR -S <query_strs_from_file')
    parser.add_option("-s", type="string", dest="search_str", default=None, help="Search Query")
    parser.add_option("-S", type="string", dest="search_file", default=None, help="Search Query From File")
    parser.add_option("-w", type="string", dest="results_file", default=None, help="Write Output to a file")
    parser.add_option("--url", action="store_true", dest="print_url", default=False, help="Print URLs for web services")
    parser.add_option("--title", action="store_true", dest="show_title", default=False, help="Print the HTML Title if available")
    (options, args)=parser.parse_args()
    show_title=options.show_title
    results_file=options.results_file
    search_file=options.search_file
    search_str=options.search_str
    print_url=options.print_url
    global ips; ips = []
    global tlds; tlds = []

    # Parse for proper args
    if (search_file == None) and (search_str == None):
        print parser.usage
        sys.exit(0)

    if (results_file == None):
        results_file == False

    SHODAN_API_KEY = '[INSERT_SHODAN_API_KEY]'
    api = shodan.Shodan(SHODAN_API_KEY)
    if results_file:
        results_file = open(results_file, 'a')
    
    # search query given at CLI -> Example: -s ip:8.8.8.8
    if search_str: 
        shodanQuery(search_str, api, results_file, show_title, print_url)

    # search queries given in a file 1 query per line -> Example: -S <file_name>
    if search_file:
        with open(search_file, 'r') as f:
            for line in f:
                shodanQuery(line, api, results_file, show_title, print_url)

    net_lookup(ips, results_file)    # Parse out CIDRs
    tld_output(tlds, results_file)   # Parse out TLDs

    if results_file:
        results_file.close()

if __name__ == "__main__":
	main()
